{
	// logging snippets
	"console.log": {
		"prefix": "clg",
		"body": "console.log($0)"
	},
	"consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
	},
	"consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
	},
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
	},
	"consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
	// import and exports snippets
	"import named module": {
		"prefix": "imd",
		"body": "import { $0 } from '$1'"
	},
	"import default module": {
		"prefix": "imp",
		"body": "import ${2:moduleName} from '${1:module}'$0"
	},
	"export default moduleName": {
		"prefix": "exm",
		"body": [
			"export default $1$0"
		],
		"description": "export default moduleName"
	},
	"export destructure": {
		"prefix": "exd",
		"body": [
			"export { $2 } from '${1:module}'$0"
		],
		"description": "export destructure"
	},
	// functions snippets
	"arrow function": {
		"prefix": "arfn",
		"body": "() => {}"
	},
	"anonymous function": {
    "prefix": "anfn",
    "body": ["(${1:params}) => {", "  ${2}", "}"],
    "description": "Creates an anonymous function in ES7 syntax"
	},
	"namedFunction": {
    "prefix": "nfn",
    "body": ["const ${1:name} = () => {", "  ${2}", "}"],
    "description": "Creates a named function in ES7 syntax"
	},
	// destructing
	"destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
	},
	"destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
	},
	// promise
	"promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {", "  ${1}", "})"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
	// graphql snippets
	"graphql resolvers": {
		"prefix": "resolvers-func",
		"body": [
			"${1:resolverName}(parent, args, ctx, info) {$2}"
		],
		"description": "graphql resolvers"
	},
	// react snippets
	"destructProps": {
    "prefix": "dp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "ds",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
	},
	"import React": {
    "prefix": "imr",
    "body": ["import React from 'react'"]
	},
	"import React, { Component }": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'"]
	},
	"import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'"]
	},
	"Class Component": {
    "prefix": "cc",
    "body": [
      "class $1 extends Component {",
      "\tstate = { $2 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Component"
	},
	"Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },
	"setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },
  "Functional setState": {
    "prefix": "ssf",
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 };", "});"],
    "description": "Functional setState"
	},
	"componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount = () => {", "  $0", "}"],
    "description": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount = () => {", "  $0", "}"],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": ["componentWillReceiveProps = (nextProps) => {", "  $0", "}"],
    "description": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate = (nextProps, nextState) => {", "  $0", "}"],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": ["componentWillUpdate = (nextProps, nextState) => {", "  $0", "}"],
    "description": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": ["componentDidUpdate = (prevProps, prevState) => {", "  $0", "}"],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount = () => {", "  $0", "}"],
    "description": "Invoked immediately before a component is unmounted from the DOM."
	},
	"render method": {
		"prefix": "ren",
		"body": [
			"render() {",
			"  return ($0)",
			"}"
		],
		"description": "render method"
	},
	// proptypes
	"import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'"]
	},
	// redux
	"import redux statement": {
    "prefix": "imc",
    "body": ["import { connect } from 'react-redux'"]
	},
	"mapStateToProps": {
		"prefix": "mstp",
		"body": [
			"const mapStateToProps = (state) => ({$0})"
		],
		"description": "mapStateToProps"
	},
	"mapDispatchToProps": {
		"prefix": "mdtp",
		"body": [
			"const mapDispatchToProps = (dispatch) => ({$0})"
		],
		"description": "mapStateToProps"
	},
	// jest snippets
	"describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})"],
    "description": "Testing `describe` block"
	},
	"testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})"],
    "description": "Testing `test` block"
  },
  "itBlock": {
    "prefix": "it",
    "body": ["it('should $1', () => {", "  $0", "})"],
    "description": "Testing `it` block"
  },
}
