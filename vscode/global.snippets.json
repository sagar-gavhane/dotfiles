{
  "console log": {
    "prefix": "console",
    "body": "console.log($1)"
  },
  "console.log": {
    "prefix": "clg",
    "body": "console.log('[$1]', $2)"
  },
  "printline": {
    "prefix": "printline",
    "body": "console.log('-------------- $1 --------------')"
  },
  "import named module": {
    "prefix": "imd",
    "body": "import { $0 } from '$1'"
  },
  "import default module": {
    "prefix": "imp",
    "body": "import ${2:module} from '${1:module}'$0"
  },
  "export default module": {
    "prefix": "ed",
    "body": "export default $1"
  },
  "export const": {
    "prefix": "ec",
    "body": "export const $1"
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types'"
  },
  "import react redux": {
    "prefix": "imrr",
    "body": "import { $1 } from 'react-redux'"
  },
  "import connect from react redux": {
    "prefix": "imc",
    "body": "import { connect } from 'react-redux'"
  },
  "import from classnames": {
    "prefix": "impcn",
    "body": "import cn from 'classnames';"
  },
  "import from style component": {
    "prefix": "impsc",
    "body": "import styled from 'styled-components';"
  },
  "import from @testing-library/react": {
    "prefix": "imptlr",
    "body": "import { $0 } from '@testing-library/react';"
  },
  "import moment": {
    "prefix": "impm",
    "body": "import moment from 'moment';"
  },
  "arrow function": {
    "prefix": "arrow-function",
    "body": "($1) => {$2}"
  },
  "anonymous function": {
    "prefix": "anonymous-function",
    "body": ["(${1:params}) => {", "  ${2}", "}"]
  },
  "named function": {
    "prefix": "named-function",
    "body": ["const ${1:name} = () => {", "  ${2}", "}"]
  },

  "destructor object": {
    "prefix": "d-obj",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}"
  },
  "destructor array": {
    "prefix": "d-array",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}"
  },

  "promise": {
    "prefix": "promise",
    "body": ["return new Promise((resolve, reject) => {", "  ${1}", "})"]
  },

  "destructor state": {
    "prefix": "d-state",
    "body": "const { $1 } = this.state"
  },
  "destructor props": {
    "prefix": "d-props",
    "body": "const { $1 } = this.props"
  },
  "import react": {
    "prefix": "imr",
    "body": "import React from 'react'"
  },
  "import react, { Component }": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react'"
  },
  "import react, { PureComponent }": {
    "prefix": "imrpc",
    "body": "import React, { PureComponent } from 'react'"
  },
  "class component": {
    "prefix": "cc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstate = { $2 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}"
    ]
  },
  "pure class component": {
    "prefix": "pcc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\tstate = { $2 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}"
    ]
  },
  "stateless function component": {
    "prefix": "sfc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn ( $0 );",
      "}"
    ]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount = () => {", "  $0", "}"]
  },
  "mapStateToProps": {
    "prefix": "mstp",
    "body": "const mapStateToProps = (state) => ({$0})"
  },
  "mapDispatchToProps": {
    "prefix": "mdtp",
    "body": "const mapDispatchToProps = (dispatch) => ({$0})"
  },
  "describe block": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "})"]
  },
  "test block": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "  $0", "})"]
  },
  "it block": {
    "prefix": "it",
    "body": ["it('should $1', () => {", "  $0", "})"]
  },
  "JSON.stringify() with pre": {
    "prefix": "jst",
    "body": "JSON.stringify($1, null, 2)"
  },
  "JSON.stringify() with pre tag": {
    "prefix": "jst-pre",
    "body": "<pre>{JSON.stringify($1, null, 2)}</pre>"
  },
  "inline props": {
    "prefix": "pr",
    "body": "${props => props.$1}"
  },
  "export for styled component": {
    "prefix": "ecs",
    "body": ["export const Styled$1 = styled.${2:div}`", "  $3", "`;"]
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n};",
    "description": "Creates empty defaultProps declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values"
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props."
  },
  "componentDidCatch": {
    "prefix": "cdc",
    "body": "componentDidCatch(error, info) {\n\t$0\n}\n",
    "description": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them."
  },
  "dispatchRedux": {
    "prefix": "disp",
    "body": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
    "description": "Adds the redux mapDispatchToProps function"
  }
}
